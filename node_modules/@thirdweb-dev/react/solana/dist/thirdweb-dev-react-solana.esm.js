import { ThirdwebSDK, getUrlForNetwork } from '@thirdweb-dev/solana';
import { useState, useEffect, createContext, useContext } from 'react';
import { jsx } from 'react/jsx-runtime';
import { ConnectionProvider, WalletProvider, useConnection, useWallet } from '@solana/wallet-adapter-react';
import { PhantomWalletAdapter } from '@solana/wallet-adapter-wallets';

/**
 * Gives access to the ThirdwebSDK instance and other useful hooks to the rest of the app.
 * Requires to be wrapped with a ConnectionProvider and a WalletProvider from @solana/wallet-adapter-react.
 * @example
 * ```tsx
 * import {
 *   useConnection,
 *   useWallet,
 * } from "@solana/wallet-adapter-react";
 * import { ThirdwebProvider } from "@thirdweb-dev/react/solana";
 *
 * const ThirdwebApp = () => {
 *  const { connection } = useConnection();
 *  const wallet = useWallet();
 *  return (
 *    <ThirdwebSDKProvider connection={connection} wallet={wallet}>
 *      <YourApp />
 *    </ThirdwebSDKProvider>
 * )};
 * ```
 */
const ThirdwebSDKProvider = _ref => {
  let {
    children,
    connection,
    wallet
  } = _ref;
  const [sdk, setSDK] = useState(null);
  useEffect(() => {
    if (connection) {
      setSDK(new ThirdwebSDK(connection));
    } else {
      setSDK(null);
    }
  }, [connection]);
  useEffect(() => {
    if (sdk) {
      if (wallet !== null && wallet !== void 0 && wallet.publicKey) {
        sdk.wallet.connect(wallet);
      } else {
        sdk.wallet.disconnect();
      }
    }
  }, [sdk, wallet]);
  return /*#__PURE__*/jsx(ThirdwebSDKContext.Provider, {
    value: sdk,
    children: children
  });
};
const ThirdwebSDKContext = /*#__PURE__*/createContext(null);

const DEFAULT_WALLETS = [new PhantomWalletAdapter()];
/**
 * Gives access to the ThirdwebSDK instance and other useful hooks to the rest of the app.
 * Requires to be wrapped with a ConnectionProvider and a WalletProvider from @solana/wallet-adapter-react.
 * @example
 * ```tsx
 * import { ThirdwebProvider } from "@thirdweb-dev/react/solana";
 *
 * const App = () => {
 *  return (
 *     <ThirdwebProvider endpoint="devnet">
 *       <YourApp />
 *     </ThirdwebProvider>
 * )};
 * ```
 * @beta
 */

const ThirdwebProvider = _ref => {
  let {
    endpoint,
    wallets,
    autoConnect,
    children
  } = _ref;
  const clusterUrl = getUrlForNetwork(endpoint);
  return /*#__PURE__*/jsx(ConnectionProvider, {
    endpoint: clusterUrl,
    children: /*#__PURE__*/jsx(WalletProvider, {
      wallets: wallets || DEFAULT_WALLETS,
      autoConnect: autoConnect || true,
      children: /*#__PURE__*/jsx(ThirdwebWrapperProvider, {
        children: children
      })
    })
  });
};
/**
 * @internal
 */

const ThirdwebWrapperProvider = _ref2 => {
  let {
    children
  } = _ref2;
  const {
    connection
  } = useConnection();
  const wallet = useWallet();
  return /*#__PURE__*/jsx(ThirdwebSDKProvider, {
    connection: connection,
    wallet: wallet,
    children: children
  });
};

function useSDK() {
  return useContext(ThirdwebSDKContext);
}

export { ThirdwebProvider, ThirdwebSDKContext, ThirdwebSDKProvider, ThirdwebWrapperProvider, useSDK };
