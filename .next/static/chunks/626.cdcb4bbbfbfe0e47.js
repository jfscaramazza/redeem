"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[626],{21626:function(t,e,r){r.r(e),r.d(e,{Pack:function(){return v}});var a=r(18515),n=r(1604),s=r(9279),o=r(61744),c=r(2593);r(54098),r(18991),r(46878),r(20583),r(84194),r(51121),r(32484),r(78435),r(26219),r(61303),r(49242),r(70565),r(13670),r(79120),r(97604),r(8187),r(19362),r(70332),r(54730),r(36250),r(85725),r(38730),r(237),r(65609),r(77208),r(86841),r(49561),r(8455),r(40553),r(26),r(69392),r(25025),r(34161),r(50266),r(98839),r(62555),r(82037),r(64063),r(65815),r(59189),r(40721),r(51375),r(43320);const d=n.z.object({contractAddress:a.K}),i=d.extend({quantity:a.N}),p=d.extend({tokenId:a.O}),h=d.extend({tokenId:a.O,quantity:a.O}),w=i.omit({quantity:!0}).extend({quantityPerReward:a.N}),l=p,u=h.omit({quantity:!0}).extend({quantityPerReward:a.O}),g=w.extend({totalRewards:a.O.default("1")}),k=l,f=u.extend({totalRewards:a.O.default("1")});n.z.object({erc20Rewards:n.z.array(w).default([]),erc721Rewards:n.z.array(l).default([]),erc1155Rewards:n.z.array(u).default([])});const A=n.z.object({erc20Rewards:n.z.array(g).default([]),erc721Rewards:n.z.array(k).default([]),erc1155Rewards:n.z.array(f).default([])}),R=A.extend({packMetadata:a.Q,rewardsPerPack:a.O.default("1"),openStartTime:a.R.default(new Date)});class v extends a.S{constructor(t,e,r){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},s=arguments.length>4?arguments[4]:void 0;super(arguments.length>5&&void 0!==arguments[5]?arguments[5]:new a.C(t,e,s,n.gasless&&"openzeppelin"in n.gasless?{...n,gasless:{openzeppelin:{...n.gasless.openzeppelin,useEOAForwarder:!0}}}:n),r),(0,a._)(this,"abi",void 0),(0,a._)(this,"metadata",void 0),(0,a._)(this,"roles",void 0),(0,a._)(this,"encoder",void 0),(0,a._)(this,"events",void 0),(0,a._)(this,"estimator",void 0),(0,a._)(this,"royalties",void 0),(0,a._)(this,"interceptor",void 0),(0,a._)(this,"erc1155",void 0),this.abi=s,this.erc1155=new a.E(this.contractWrapper,this.storage),this.metadata=new a.a(this.contractWrapper,a.U,this.storage),this.roles=new a.b(this.contractWrapper,v.contractRoles),this.royalties=new a.c(this.contractWrapper,this.metadata),this.encoder=new a.h(this.contractWrapper),this.estimator=new a.G(this.contractWrapper),this.events=new a.f(this.contractWrapper),this.interceptor=new a.j(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){return this.erc1155.get(t)}async getAll(t){return this.erc1155.getAll(t)}async getOwned(t){return this.erc1155.getOwned(t)}async getTotalCount(){return this.erc1155.totalCount()}async isTransferRestricted(){return!(await this.contractWrapper.readContract.hasRole((0,a.k)("transfer"),s.d))}async getPackContents(t){const{contents:e,perUnitAmounts:r}=await this.contractWrapper.readContract.getPackContents(t),n=[],s=[],d=[];for(let i=0;i<e.length;i++){const t=e[i],p=r[i];switch(t.tokenType){case 0:{const e=await(0,a.s)(this.contractWrapper.getProvider(),t.assetContract),r=o.formatUnits(t.totalAmount,e.decimals);n.push({contractAddress:t.assetContract,quantityPerReward:p.toString(),totalRewards:c.O$.from(r).div(p).toString()});break}case 1:s.push({contractAddress:t.assetContract,tokenId:t.tokenId.toString()});break;case 2:d.push({contractAddress:t.assetContract,tokenId:t.tokenId.toString(),quantityPerReward:p.toString(),totalRewards:c.O$.from(t.totalAmount).div(p).toString()})}}return{erc20Rewards:n,erc721Rewards:s,erc1155Rewards:d}}async create(t){const e=await this.contractWrapper.getSignerAddress();return this.createTo(e,t)}async addPackContents(t,e){const r=await this.contractWrapper.getSignerAddress(),a=A.parse(e),{contents:n,numOfRewardUnits:s}=await this.toPackContentArgs(a),o=await this.contractWrapper.sendTransaction("addPackContents",[t,n,s,r]),c=this.contractWrapper.parseLogs("PackUpdated",null===o||void 0===o?void 0:o.logs);if(0===c.length)throw new Error("PackUpdated event not found");const d=c[0].args.packId;return{id:d,receipt:o,data:()=>this.erc1155.get(d)}}async createTo(t,e){const r=await(0,a.u)(e.packMetadata,this.storage),n=R.parse(e),{erc20Rewards:s,erc721Rewards:o,erc1155Rewards:c}=n,d={erc20Rewards:s,erc721Rewards:o,erc1155Rewards:c},{contents:i,numOfRewardUnits:p}=await this.toPackContentArgs(d),h=await this.contractWrapper.sendTransaction("createPack",[i,p,r,n.openStartTime,n.rewardsPerPack,t]),w=this.contractWrapper.parseLogs("PackCreated",null===h||void 0===h?void 0:h.logs);if(0===w.length)throw new Error("PackCreated event not found");const l=w[0].args.packId;return{id:l,receipt:h,data:()=>this.erc1155.get(l)}}async open(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;const r=await this.contractWrapper.sendTransaction("openPack",[t,e]),n=this.contractWrapper.parseLogs("PackOpened",null===r||void 0===r?void 0:r.logs);if(0===n.length)throw new Error("PackOpened event not found");const s=n[0].args.rewardUnitsDistributed,c=[],d=[],i=[];for(const p of s)switch(p.tokenType){case 0:{const t=await(0,a.s)(this.contractWrapper.getProvider(),p.assetContract);c.push({contractAddress:p.assetContract,quantityPerReward:o.formatUnits(p.totalAmount,t.decimals).toString()});break}case 1:d.push({contractAddress:p.assetContract,tokenId:p.tokenId.toString()});break;case 2:i.push({contractAddress:p.assetContract,tokenId:p.tokenId.toString(),quantityPerReward:p.totalAmount.toString()})}return{erc20Rewards:c,erc721Rewards:d,erc1155Rewards:i}}async toPackContentArgs(t){const e=[],r=[],{erc20Rewards:n,erc721Rewards:s,erc1155Rewards:o}=t,d=this.contractWrapper.getProvider(),i=await this.contractWrapper.getSignerAddress();for(const c of n){const t=(await(0,a.t)(d,c.quantityPerReward,c.contractAddress)).mul(c.totalRewards);if(!(await(0,a.v)(this.contractWrapper,c.contractAddress,t)))throw new Error(`ERC20 token with contract address "${c.contractAddress}" does not have enough allowance to transfer.\n\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\n\nawait sdk.getToken("${c.contractAddress}").setAllowance("${this.getAddress()}", ${t});\n\n`);r.push(c.totalRewards),e.push({assetContract:c.contractAddress,tokenType:0,totalAmount:t,tokenId:0})}for(const c of s){if(!(await(0,a.w)(this.contractWrapper.getProvider(),this.getAddress(),c.contractAddress,c.tokenId,i)))throw new Error(`ERC721 token "${c.tokenId}" with contract address "${c.contractAddress}" is not approved for transfer.\n\nYou can give approval the multiwrap contract to transfer this token by running:\n\nawait sdk.getNFTCollection("${c.contractAddress}").setApprovalForToken("${this.getAddress()}", ${c.tokenId});\n\n`);r.push("1"),e.push({assetContract:c.contractAddress,tokenType:1,totalAmount:1,tokenId:c.tokenId})}for(const p of o){if(!(await(0,a.w)(this.contractWrapper.getProvider(),this.getAddress(),p.contractAddress,p.tokenId,i)))throw new Error(`ERC1155 token "${p.tokenId}" with contract address "${p.contractAddress}" is not approved for transfer.\n\nYou can give approval the multiwrap contract to transfer this token by running:\n\nawait sdk.getEdition("${p.contractAddress}").setApprovalForAll("${this.getAddress()}", true);\n\n`);r.push(p.totalRewards),e.push({assetContract:p.contractAddress,tokenType:2,totalAmount:c.O$.from(p.quantityPerReward).mul(c.O$.from(p.totalRewards)),tokenId:p.tokenId})}return{contents:e,numOfRewardUnits:r}}async call(t){for(var e=arguments.length,r=new Array(e>1?e-1:0),a=1;a<e;a++)r[a-1]=arguments[a];return this.contractWrapper.call(t,...r)}}(0,a._)(v,"contractRoles",["admin","minter","asset","transfer"])}}]);