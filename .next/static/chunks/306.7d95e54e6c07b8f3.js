"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[306],{58306:function(t,r,e){e.r(r),e.d(r,{NFTDrop:function(){return o}});var a=e(18515),n=e(2593),i=e(9279),s=e(29251);e(54098),e(18991),e(46878),e(20583),e(84194),e(51121),e(32484),e(78435),e(26219),e(61303),e(49242),e(70565),e(13670),e(79120),e(97604),e(8187),e(19362),e(70332),e(54730),e(36250),e(85725),e(38730),e(237),e(65609),e(77208),e(86841),e(49561),e(8455),e(40553),e(26),e(69392),e(25025),e(34161),e(50266),e(98839),e(62555),e(82037),e(64063),e(65815),e(59189),e(40721),e(51375),e(43320);class o extends a.q{constructor(t,r,e){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=arguments.length>4?arguments[4]:void 0;super(arguments.length>5&&void 0!==arguments[5]?arguments[5]:new a.C(t,r,i,n),e),(0,a._)(this,"abi",void 0),(0,a._)(this,"encoder",void 0),(0,a._)(this,"estimator",void 0),(0,a._)(this,"metadata",void 0),(0,a._)(this,"sales",void 0),(0,a._)(this,"platformFees",void 0),(0,a._)(this,"events",void 0),(0,a._)(this,"roles",void 0),(0,a._)(this,"interceptor",void 0),(0,a._)(this,"royalties",void 0),(0,a._)(this,"claimConditions",void 0),(0,a._)(this,"revealer",void 0),(0,a._)(this,"checkout",void 0),(0,a._)(this,"erc721",void 0),this.abi=i,this.metadata=new a.a(this.contractWrapper,a.A,this.storage),this.roles=new a.b(this.contractWrapper,o.contractRoles),this.royalties=new a.c(this.contractWrapper,this.metadata),this.sales=new a.d(this.contractWrapper),this.claimConditions=new a.B(this.contractWrapper,this.metadata,this.storage),this.encoder=new a.h(this.contractWrapper),this.estimator=new a.G(this.contractWrapper),this.events=new a.f(this.contractWrapper),this.platformFees=new a.i(this.contractWrapper),this.erc721=new a.y(this.contractWrapper,this.storage),this.revealer=new a.F(this.contractWrapper,this.storage,a.H.name,(()=>this.erc721.nextTokenIdToMint())),this.interceptor=new a.j(this.contractWrapper),this.checkout=new a.P(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async totalSupply(){const t=await this.totalClaimedSupply(),r=await this.totalUnclaimedSupply();return t.add(r)}async getAllClaimed(t){const r=n.O$.from((null===t||void 0===t?void 0:t.start)||0).toNumber(),e=n.O$.from((null===t||void 0===t?void 0:t.count)||a.p).toNumber(),i=Math.min((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(),r+e);return await Promise.all(Array.from(Array(i).keys()).map((t=>this.get(t.toString()))))}async getAllUnclaimed(t){const r=n.O$.from((null===t||void 0===t?void 0:t.start)||0).toNumber(),e=n.O$.from((null===t||void 0===t?void 0:t.count)||a.p).toNumber(),i=n.O$.from(Math.max((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(),r)),s=n.O$.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(),i.toNumber()+e));return await Promise.all(Array.from(Array(s.sub(i).toNumber()).keys()).map((t=>this.erc721.getTokenMetadata(i.add(t).toString()))))}async totalClaimedSupply(){return await this.contractWrapper.readContract.nextTokenIdToClaim()}async totalUnclaimedSupply(){return(await this.contractWrapper.readContract.nextTokenIdToMint()).sub(await this.totalClaimedSupply())}async isTransferRestricted(){return!(await this.contractWrapper.readContract.hasRole((0,a.k)("transfer"),i.d))}async createBatch(t,r){const e=await this.contractWrapper.readContract.nextTokenIdToMint(),n=await(0,a.I)(t,this.storage,e.toNumber(),r),i=n[0].substring(0,n[0].lastIndexOf("/"));for(let a=0;a<n.length;a++){const t=n[a].substring(0,n[a].lastIndexOf("/"));if(i!==t)throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${i}' but got '${t}'`)}const o=await this.contractWrapper.sendTransaction("lazyMint",[n.length,i.endsWith("/")?i:`${i}/`,s.Y0("")]),c=this.contractWrapper.parseLogs("TokensLazyMinted",null===o||void 0===o?void 0:o.logs),h=c[0].args.startTokenId,l=c[0].args.endTokenId,p=[];for(let a=h;a.lte(l);a=a.add(1))p.push({id:a,receipt:o,data:()=>this.erc721.getTokenMetadata(a)});return p}async getClaimTransaction(t,r){let e=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return this.erc721.getClaimTransaction(t,r,{checkERC20Allowance:e})}async claimTo(t,r){let e=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return this.erc721.claimTo(t,r,{checkERC20Allowance:e})}async claim(t){let r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return this.claimTo(await this.contractWrapper.getSignerAddress(),t,r)}async burn(t){return this.erc721.burn(t)}async get(t){return this.erc721.get(t)}async ownerOf(t){return this.erc721.ownerOf(t)}async balanceOf(t){return this.erc721.balanceOf(t)}async balance(){return this.erc721.balance()}async isApproved(t,r){return this.erc721.isApproved(t,r)}async transfer(t,r){return this.erc721.transfer(t,r)}async setApprovalForAll(t,r){return this.erc721.setApprovalForAll(t,r)}async setApprovalForToken(t,r){return{receipt:await this.contractWrapper.sendTransaction("approve",[t,r])}}async prepareClaim(t,r){return(0,a.J)(t,await this.claimConditions.getActive(),(async()=>(await this.metadata.get()).merkle),0,this.contractWrapper,this.storage,r)}async call(t){for(var r=arguments.length,e=new Array(r>1?r-1:0),a=1;a<r;a++)e[a-1]=arguments[a];return this.contractWrapper.call(t,...e)}}(0,a._)(o,"contractRoles",["admin","minter","transfer"])}}]);